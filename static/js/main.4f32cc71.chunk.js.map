{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Titles","id","Form","props","onSubmit","getWeather","type","name","placeholder","className","value","selected","Weather","city","country","description","temperature","unit","feelsLike","humidity","wind","error","Wrapper","bg","condition","Wrap","styled","div","process","API_Key","App","state","undefined","e","a","preventDefault","target","elements","units","unit_list","fetch","api_call","json","data","setState","main","temp","sys","weather","feels_like","speed","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oTASeA,EAPA,kBACX,6BACI,wBAAIC,GAAG,SAAP,kBACA,uBAAGA,GAAG,YAAN,0CCeOC,EAlBF,SAACC,GAAD,OAET,0BAAMC,SAAUD,EAAME,YAElB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,UAAUC,UAAU,iBAC/D,2BAAOH,KAAK,OAAOC,KAAK,UAAUC,YAAY,aAAaC,UAAU,iBAErE,4BAAQA,UAAU,eAAeR,GAAK,aAClC,4BAAQS,MAAQ,UAAhB,WACA,4BAAQC,SAAS,WAAWD,MAAQ,YAApC,cACA,4BAAQA,MAAQ,UAAhB,WAGJ,iDC0BOE,EAvCC,SAACT,GAAD,OACZ,6BAEKA,EAAMU,MAAQV,EAAMW,SAAW,yBAAKL,UAAU,mBAAkB,yBAAKR,GAAG,gBAAR,cACjE,yBAAKA,GAAG,eAAR,IAAwBE,EAAMU,KAA9B,KAAsCV,EAAMW,UAE3CX,EAAMY,aAAe,yBAAKN,UAAU,mBAAkB,yBAAKR,GAAG,gBAAR,cAAuC,6BAAME,EAAMY,cAEzGZ,EAAMa,aACP,yBAAKP,UAAU,mBACX,yBAAKR,GAAG,gBAAR,iBACA,yBAAKA,GAAG,eAAR,IAAwBE,EAAMa,YACX,YAAdb,EAAMc,KAAsB,SAAwB,WAAfd,EAAMc,KAAoB,SAAuB,UAAdd,EAAMc,KAAmB,SAAS,KAD/G,MAKHd,EAAMe,WACP,yBAAKT,UAAU,mBACX,yBAAKR,GAAG,gBAAR,gBACA,yBAAKA,GAAG,eAAR,IAAwBE,EAAMe,UACX,YAAdf,EAAMc,KAAsB,SAAwB,WAAfd,EAAMc,KAAoB,SAAuB,UAAdd,EAAMc,KAAmB,SAAS,KAD/G,MAIHd,EAAMgB,UAAY,yBAAKV,UAAU,mBAAkB,yBAAKR,GAAG,gBAAR,cACpD,yBAAKA,GAAG,eAAR,IAAwBE,EAAMgB,SAA9B,OAEChB,EAAMiB,MACP,yBAAKX,UAAU,mBACX,yBAAKR,GAAG,gBAAR,gBACA,yBAAKA,GAAG,eAAR,IAAwBE,EAAMiB,KACX,YAAdjB,EAAMc,KAAsB,cAAgC,WAAfd,EAAMc,MAAkD,UAAdd,EAAMc,KAAtB,aAAyD,KADrI,MAKHd,EAAMkB,OAAS,2BAAIlB,EAAMkB,S,wYC9BlC,IA8DeC,EA9DC,SAACnB,GAEb,IAAIoB,EAAK,QAEa,MAAnBpB,EAAMqB,YAEDD,EADkB,QAAnBpB,EAAMqB,WAA0C,OAAnBrB,EAAMqB,UAC/B,OAEoB,OAAnBrB,EAAMqB,WAAyC,QAAnBrB,EAAMqB,UACjC,QAEkB,UAAnBrB,EAAMqB,WAA4C,WAAnBrB,EAAMqB,UACpC,OAGArB,EAAMqB,WAInB,IAAMC,EAAOC,IAAOC,IAAV,IAEaC,gBAA8BL,GAUrD,OACI,kBAACE,EAAD,KACA,yBAAKhB,UAAU,kBACX,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BAA2B,kBAAC,EAAD,QAE5C,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,CAAMJ,WAAYF,EAAME,eAG5B,yBAAKI,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACIO,YAAab,EAAMa,YACnBH,KAAMV,EAAMU,KACZC,QAASX,EAAMW,QACfK,SAAUhB,EAAMgB,SAChBJ,YAAaZ,EAAMY,YACnBG,UAAWf,EAAMe,UACjBE,KAAMjB,EAAMiB,KACZH,KAAMd,EAAMc,KACZI,MAAOlB,EAAMkB,aCvD3BQ,EAAU,mCAwFDC,E,4MAlFbC,MAAQ,CACNf,iBAAagB,EACbnB,UAAMmB,EACNlB,aAASkB,EACTb,cAAUa,EACVjB,iBAAaiB,EACbR,eAAWQ,EACXd,eAAWc,EACXZ,UAAMY,EACNf,UAAMe,EACNX,WAAOW,G,EAGT3B,W,uCAAa,WAAO4B,GAAP,uBAAAC,EAAA,6DACXD,EAAEE,iBAEItB,EAAOoB,EAAEG,OAAOC,SAASxB,KAAKH,MAC9BI,EAAUmB,EAAEG,OAAOC,SAASvB,QAAQJ,MACtC4B,EAAQL,EAAEG,OAAOC,SAASE,UAAU7B,MAL7B,SAQY8B,MAAM,oDAAD,OAAqD3B,EAArD,YAA6DC,EAA7D,kBAA8EwB,EAA9E,kBAA6FT,IAR9G,cAQLY,EARK,gBAWQA,EAASC,OAXjB,OAWLC,EAXK,OAcP9B,GAIF,EAAK+B,SAAS,CACZ5B,YAAa2B,EAAKE,KAAKC,KACvBjC,KAAM8B,EAAKpC,KACXO,QAAS6B,EAAKI,IAAIjC,QAClBK,SAAUwB,EAAKE,KAAK1B,SACpBJ,YAAa4B,EAAKK,QAAQ,GAAGjC,YAC7BS,UAAWmB,EAAKK,QAAQ,GAAGH,KAC3B3B,UAAWyB,EAAKE,KAAKI,WACrB7B,KAAMuB,EAAKvB,KAAK8B,MAChBjC,KAAMqB,EACNjB,MAAO,KAEAsB,EAAKK,QAAQ,GAAGjC,aAEzB,EAAK6B,SAAS,CACZ5B,iBAAagB,EACbnB,UAAMmB,EACNlB,aAASkB,EACTb,cAAUa,EACVjB,iBAAaiB,EACbR,eAAWQ,EACXd,eAAWc,EACXZ,UAAMY,EACNf,UAAMe,EACNX,MAAO,yBAAKZ,UAAU,2BAAf,mDA1CA,4C,6GA+CJ,IAAD,EACN,OACE,6BACE,kBAAC,GAAD,GACEM,YAAaoC,KAAKpB,MAAMhB,YACxBC,YAAamC,KAAKpB,MAAMf,YACxBH,KAAMsC,KAAKpB,MAAMlB,KACjBC,QAASqC,KAAKpB,MAAMjB,QACpBK,SAAUgC,KAAKpB,MAAMZ,UALvB,4BAMegC,KAAKpB,MAAMhB,aAN1B,0BAOaoC,KAAKpB,MAAMP,WAPxB,0BAQa2B,KAAKpB,MAAMb,WARxB,qBASQiC,KAAKpB,MAAMX,MATnB,qBAUQ+B,KAAKpB,MAAMd,MAVnB,sBAWSkC,KAAKpB,MAAMV,OAXpB,2BAYc8B,KAAK9C,YAZnB,S,GAlEU+C,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjD,GACLkD,QAAQlD,MAAMA,EAAMmD,c","file":"static/js/main.4f32cc71.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 id=\"title\">Weather Report</h1>\r\n        <p id=\"subtitle\">Find weather conditions on any city.</p>\r\n    </div>\r\n);\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\nconst Form = (props) => (\r\n    \r\n    <form onSubmit={props.getWeather}>\r\n\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\" className=\"form-control\"></input>    \r\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\" className=\"form-control\"></input>  \r\n  \r\n        <select className=\"form-control\" id = \"unit_list\">\r\n            <option value = \"metric\">Celcius</option>\r\n            <option selected=\"selected\" value = \"imperial\">Fahrenheit</option>\r\n            <option value = \"kelvin\">Kelvin</option>\r\n        </select>\r\n\r\n        <button>Get Weather</button>\r\n              \r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = (props) => (\r\n    <div>\r\n        {/* Only show items when they have a value */}\r\n        {props.city && props.country && <div className=\"outputContainer\"><div id=\"weatherTitle\">Location: </div> \r\n        <div id=\"weatherInfo\"> {props.city}, {props.country}</div></div>}\r\n\r\n        {props.description && <div className=\"outputContainer\"><div id=\"weatherTitle\">Condition:</div><div>{props.description}</div></div>}\r\n\r\n        {props.temperature && \r\n        <div className=\"outputContainer\">\r\n            <div id=\"weatherTitle\">Temperature: </div> \r\n            <div id=\"weatherInfo\"> {props.temperature} \r\n                {props.unit == \"imperial\" ? (\" °F\") : props.unit === \"metric\"? (\" °C\") : props.unit == \"kelvin\"? (\" °K\") : null} </div>\r\n            </div>\r\n        }\r\n\r\n        {props.feelsLike && \r\n        <div className=\"outputContainer\">\r\n            <div id=\"weatherTitle\">Feels like: </div> \r\n            <div id=\"weatherInfo\"> {props.feelsLike}\r\n                {props.unit == \"imperial\" ? (\" °F\") : props.unit === \"metric\"? (\" °C\") : props.unit == \"kelvin\"? (\" °K\") : null} </div>\r\n            </div>\r\n        }\r\n        {props.humidity && <div className=\"outputContainer\"><div id=\"weatherTitle\">Humidity: </div> \r\n        <div id=\"weatherInfo\"> {props.humidity} %</div></div>}\r\n\r\n        {props.wind && \r\n        <div className=\"outputContainer\">\r\n            <div id=\"weatherTitle\">Wind Speed: </div> \r\n            <div id=\"weatherInfo\"> {props.wind}\r\n                {props.unit == \"imperial\" ? (\" miles/hour\") : props.unit === \"metric\"? (\" meter/sec\") : props.unit == \"kelvin\"? (\" meter/sec\") : null} </div>\r\n            </div>\r\n        }\r\n\r\n        {props.error && <p>{props.error}</p>}\r\n\r\n    </div>\r\n)\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport Titles from \"./Titles\";\r\nimport Form from \"./Form\";\r\nimport Weather from \"./Weather\";\r\n\r\nconst Wrapper = (props) => {\r\n    \r\n    let bg = \"Clear\";\r\n\r\n    if(props.condition != null){\r\n        if(props.condition == \"Haze\" || props.condition == \"Fog\"){\r\n            bg=\"Mist\";\r\n        }\r\n        else if(props.condition == \"Ash\" || props.condition == \"Dust\"){\r\n            bg = \"Smoke\";\r\n        }\r\n        else if(props.condition == \"Squall\" || props.condition == \"Tornado\"){\r\n            bg = \"Rain\";\r\n        }\r\n        else{\r\n            bg = props.condition;\r\n        }\r\n    }\r\n\r\n    const Wrap = styled.div`\r\n        height: 100vh; \r\n        background: url(\"${process.env.PUBLIC_URL}/img/${bg}.png\");\r\n        background-position: center;\r\n        background-repeat: no-repeat;\r\n        background-attachment: fixed;\r\n        background-size: cover;\r\n        display: flex;\r\n        justify-content: safe center;\r\n        align-items: safe center;\r\n    `\r\n\r\n    return ( \r\n        <Wrap>\r\n        <div className=\"main container\">\r\n            <div className=\"row\">\r\n              <div className=\"mx-auto text-center mt-5\"><Titles /></div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"mx-auto text-center mt-3\">\r\n                <Form getWeather={props.getWeather}/>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"mx-auto mt-4\">\r\n                <Weather \r\n                    temperature={props.temperature}\r\n                    city={props.city}\r\n                    country={props.country}\r\n                    humidity={props.humidity}\r\n                    description={props.description}\r\n                    feelsLike={props.feelsLike}\r\n                    wind={props.wind}\r\n                    unit={props.unit}\r\n                    error={props.error}\r\n                  />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Wrap>\r\n        );\r\n}\r\n\r\nexport default Wrapper;","import React, {useState} from 'react';\nimport Wrapper from \"./components/Wrapper\";\n\n\nconst API_Key = \"ee3bea37b5ccfc98b44c8fd612ca6d84\";\nlet bg = \"clear sky\";\n\nclass App extends React.Component{\n\n  // States object. The initial state is undefined for all items.\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    condition: undefined,\n    feelsLike: undefined,\n    wind: undefined,\n    unit: undefined,\n    error: undefined,\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();   // This prevents the page from reloading before the api call\n\n    const city = e.target.elements.city.value;  \n    const country = e.target.elements.country.value;\n    let units = e.target.elements.unit_list.value;\n\n    // Create a api call called api_call\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=${units}&APPID=${API_Key}`);\n\n    // Convert \"api_call\" to json format and store it in \"data\"\n    const data = await api_call.json();\n\n    // Only run this code if city is not empty\n    if (city){\n      // You can use use \"console.log(data);\" to see API data\n      /* Update states from the state object. The json is stored in \"data\" so to access \n      temperature for example \"data.main.temp\" is used */\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        condition: data.weather[0].main,\n        feelsLike: data.main.feels_like,\n        wind: data.wind.speed,\n        unit: units,\n        error: \"\",\n      });\n          bg = data.weather[0].description;\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        condition: undefined,\n        feelsLike: undefined,\n        wind: undefined,\n        unit: undefined,\n        error: <div className=\"alert alert-danger mt-3\">Please enter data before clicking the button.</div>,\n      });\n    }\n  }\n\n  render(){\n    return(\n      <div>\n        <Wrapper \n          description={this.state.description } \n          temperature={this.state.temperature}\n          city={this.state.city}\n          country={this.state.country}\n          humidity={this.state.humidity}\n          description={this.state.description}\n          condition={this.state.condition}\n          feelsLike={this.state.feelsLike}\n          wind={this.state.wind}\n          unit={this.state.unit}\n          error={this.state.error}\n          getWeather={this.getWeather}\n        />\n      </div>\n    );\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}